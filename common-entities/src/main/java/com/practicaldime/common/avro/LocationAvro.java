/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.practicaldime.common.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LocationAvro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4114201715985867996L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LocationAvro\",\"namespace\":\"com.practicaldime.common.avro\",\"fields\":[{\"name\":\"id\",\"type\":[\"long\",\"null\"]},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"county\",\"type\":[\"string\",\"null\"]},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"zip\",\"type\":[\"string\",\"null\"]},{\"name\":\"country\",\"type\":[\"string\",\"null\"]},{\"name\":\"createdBy\",\"type\":[\"string\",\"null\"]},{\"name\":\"createdTs\",\"type\":[\"string\",\"null\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LocationAvro> ENCODER =
      new BinaryMessageEncoder<LocationAvro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LocationAvro> DECODER =
      new BinaryMessageDecoder<LocationAvro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LocationAvro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LocationAvro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LocationAvro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LocationAvro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LocationAvro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LocationAvro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LocationAvro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LocationAvro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Long id;
  @Deprecated public java.lang.CharSequence city;
  @Deprecated public java.lang.CharSequence county;
  @Deprecated public java.lang.CharSequence state;
  @Deprecated public java.lang.CharSequence zip;
  @Deprecated public java.lang.CharSequence country;
  @Deprecated public java.lang.CharSequence createdBy;
  @Deprecated public java.lang.CharSequence createdTs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LocationAvro() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param city The new value for city
   * @param county The new value for county
   * @param state The new value for state
   * @param zip The new value for zip
   * @param country The new value for country
   * @param createdBy The new value for createdBy
   * @param createdTs The new value for createdTs
   */
  public LocationAvro(java.lang.Long id, java.lang.CharSequence city, java.lang.CharSequence county, java.lang.CharSequence state, java.lang.CharSequence zip, java.lang.CharSequence country, java.lang.CharSequence createdBy, java.lang.CharSequence createdTs) {
    this.id = id;
    this.city = city;
    this.county = county;
    this.state = state;
    this.zip = zip;
    this.country = country;
    this.createdBy = createdBy;
    this.createdTs = createdTs;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return city;
    case 2: return county;
    case 3: return state;
    case 4: return zip;
    case 5: return country;
    case 6: return createdBy;
    case 7: return createdTs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.Long)value$; break;
    case 1: city = (java.lang.CharSequence)value$; break;
    case 2: county = (java.lang.CharSequence)value$; break;
    case 3: state = (java.lang.CharSequence)value$; break;
    case 4: zip = (java.lang.CharSequence)value$; break;
    case 5: country = (java.lang.CharSequence)value$; break;
    case 6: createdBy = (java.lang.CharSequence)value$; break;
    case 7: createdTs = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.Long getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.Long value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }


  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'county' field.
   * @return The value of the 'county' field.
   */
  public java.lang.CharSequence getCounty() {
    return county;
  }


  /**
   * Sets the value of the 'county' field.
   * @param value the value to set.
   */
  public void setCounty(java.lang.CharSequence value) {
    this.county = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'zip' field.
   * @return The value of the 'zip' field.
   */
  public java.lang.CharSequence getZip() {
    return zip;
  }


  /**
   * Sets the value of the 'zip' field.
   * @param value the value to set.
   */
  public void setZip(java.lang.CharSequence value) {
    this.zip = value;
  }

  /**
   * Gets the value of the 'country' field.
   * @return The value of the 'country' field.
   */
  public java.lang.CharSequence getCountry() {
    return country;
  }


  /**
   * Sets the value of the 'country' field.
   * @param value the value to set.
   */
  public void setCountry(java.lang.CharSequence value) {
    this.country = value;
  }

  /**
   * Gets the value of the 'createdBy' field.
   * @return The value of the 'createdBy' field.
   */
  public java.lang.CharSequence getCreatedBy() {
    return createdBy;
  }


  /**
   * Sets the value of the 'createdBy' field.
   * @param value the value to set.
   */
  public void setCreatedBy(java.lang.CharSequence value) {
    this.createdBy = value;
  }

  /**
   * Gets the value of the 'createdTs' field.
   * @return The value of the 'createdTs' field.
   */
  public java.lang.CharSequence getCreatedTs() {
    return createdTs;
  }


  /**
   * Sets the value of the 'createdTs' field.
   * @param value the value to set.
   */
  public void setCreatedTs(java.lang.CharSequence value) {
    this.createdTs = value;
  }

  /**
   * Creates a new LocationAvro RecordBuilder.
   * @return A new LocationAvro RecordBuilder
   */
  public static com.practicaldime.common.avro.LocationAvro.Builder newBuilder() {
    return new com.practicaldime.common.avro.LocationAvro.Builder();
  }

  /**
   * Creates a new LocationAvro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LocationAvro RecordBuilder
   */
  public static com.practicaldime.common.avro.LocationAvro.Builder newBuilder(com.practicaldime.common.avro.LocationAvro.Builder other) {
    if (other == null) {
      return new com.practicaldime.common.avro.LocationAvro.Builder();
    } else {
      return new com.practicaldime.common.avro.LocationAvro.Builder(other);
    }
  }

  /**
   * Creates a new LocationAvro RecordBuilder by copying an existing LocationAvro instance.
   * @param other The existing instance to copy.
   * @return A new LocationAvro RecordBuilder
   */
  public static com.practicaldime.common.avro.LocationAvro.Builder newBuilder(com.practicaldime.common.avro.LocationAvro other) {
    if (other == null) {
      return new com.practicaldime.common.avro.LocationAvro.Builder();
    } else {
      return new com.practicaldime.common.avro.LocationAvro.Builder(other);
    }
  }

  /**
   * RecordBuilder for LocationAvro instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LocationAvro>
    implements org.apache.avro.data.RecordBuilder<LocationAvro> {

    private java.lang.Long id;
    private java.lang.CharSequence city;
    private java.lang.CharSequence county;
    private java.lang.CharSequence state;
    private java.lang.CharSequence zip;
    private java.lang.CharSequence country;
    private java.lang.CharSequence createdBy;
    private java.lang.CharSequence createdTs;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.practicaldime.common.avro.LocationAvro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.county)) {
        this.county = data().deepCopy(fields()[2].schema(), other.county);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.zip)) {
        this.zip = data().deepCopy(fields()[4].schema(), other.zip);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.createdBy)) {
        this.createdBy = data().deepCopy(fields()[6].schema(), other.createdBy);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.createdTs)) {
        this.createdTs = data().deepCopy(fields()[7].schema(), other.createdTs);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing LocationAvro instance
     * @param other The existing instance to copy.
     */
    private Builder(com.practicaldime.common.avro.LocationAvro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.county)) {
        this.county = data().deepCopy(fields()[2].schema(), other.county);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.state)) {
        this.state = data().deepCopy(fields()[3].schema(), other.state);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.zip)) {
        this.zip = data().deepCopy(fields()[4].schema(), other.zip);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.country)) {
        this.country = data().deepCopy(fields()[5].schema(), other.country);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.createdBy)) {
        this.createdBy = data().deepCopy(fields()[6].schema(), other.createdBy);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.createdTs)) {
        this.createdTs = data().deepCopy(fields()[7].schema(), other.createdTs);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.Long getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder setId(java.lang.Long value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.CharSequence getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.city = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder clearCity() {
      city = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'county' field.
      * @return The value.
      */
    public java.lang.CharSequence getCounty() {
      return county;
    }


    /**
      * Sets the value of the 'county' field.
      * @param value The value of 'county'.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder setCounty(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.county = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'county' field has been set.
      * @return True if the 'county' field has been set, false otherwise.
      */
    public boolean hasCounty() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'county' field.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder clearCounty() {
      county = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder setState(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.state = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder clearState() {
      state = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'zip' field.
      * @return The value.
      */
    public java.lang.CharSequence getZip() {
      return zip;
    }


    /**
      * Sets the value of the 'zip' field.
      * @param value The value of 'zip'.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder setZip(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.zip = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'zip' field has been set.
      * @return True if the 'zip' field has been set, false otherwise.
      */
    public boolean hasZip() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'zip' field.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder clearZip() {
      zip = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'country' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountry() {
      return country;
    }


    /**
      * Sets the value of the 'country' field.
      * @param value The value of 'country'.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder setCountry(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.country = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'country' field has been set.
      * @return True if the 'country' field has been set, false otherwise.
      */
    public boolean hasCountry() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'country' field.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder clearCountry() {
      country = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdBy' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreatedBy() {
      return createdBy;
    }


    /**
      * Sets the value of the 'createdBy' field.
      * @param value The value of 'createdBy'.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder setCreatedBy(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.createdBy = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'createdBy' field has been set.
      * @return True if the 'createdBy' field has been set, false otherwise.
      */
    public boolean hasCreatedBy() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'createdBy' field.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder clearCreatedBy() {
      createdBy = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'createdTs' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreatedTs() {
      return createdTs;
    }


    /**
      * Sets the value of the 'createdTs' field.
      * @param value The value of 'createdTs'.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder setCreatedTs(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.createdTs = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'createdTs' field has been set.
      * @return True if the 'createdTs' field has been set, false otherwise.
      */
    public boolean hasCreatedTs() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'createdTs' field.
      * @return This builder.
      */
    public com.practicaldime.common.avro.LocationAvro.Builder clearCreatedTs() {
      createdTs = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LocationAvro build() {
      try {
        LocationAvro record = new LocationAvro();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.Long) defaultValue(fields()[0]);
        record.city = fieldSetFlags()[1] ? this.city : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.county = fieldSetFlags()[2] ? this.county : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.state = fieldSetFlags()[3] ? this.state : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.zip = fieldSetFlags()[4] ? this.zip : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.country = fieldSetFlags()[5] ? this.country : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.createdBy = fieldSetFlags()[6] ? this.createdBy : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.createdTs = fieldSetFlags()[7] ? this.createdTs : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LocationAvro>
    WRITER$ = (org.apache.avro.io.DatumWriter<LocationAvro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LocationAvro>
    READER$ = (org.apache.avro.io.DatumReader<LocationAvro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.id == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeLong(this.id);
    }

    out.writeString(this.city);

    if (this.county == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.county);
    }

    out.writeString(this.state);

    if (this.zip == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.zip);
    }

    if (this.country == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.country);
    }

    if (this.createdBy == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.createdBy);
    }

    if (this.createdTs == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      out.writeString(this.createdTs);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 0) {
        in.readNull();
        this.id = null;
      } else {
        this.id = in.readLong();
      }

      this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.county = null;
      } else {
        this.county = in.readString(this.county instanceof Utf8 ? (Utf8)this.county : null);
      }

      this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);

      if (in.readIndex() != 0) {
        in.readNull();
        this.zip = null;
      } else {
        this.zip = in.readString(this.zip instanceof Utf8 ? (Utf8)this.zip : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.country = null;
      } else {
        this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.createdBy = null;
      } else {
        this.createdBy = in.readString(this.createdBy instanceof Utf8 ? (Utf8)this.createdBy : null);
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.createdTs = null;
      } else {
        this.createdTs = in.readString(this.createdTs instanceof Utf8 ? (Utf8)this.createdTs : null);
      }

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 0) {
            in.readNull();
            this.id = null;
          } else {
            this.id = in.readLong();
          }
          break;

        case 1:
          this.city = in.readString(this.city instanceof Utf8 ? (Utf8)this.city : null);
          break;

        case 2:
          if (in.readIndex() != 0) {
            in.readNull();
            this.county = null;
          } else {
            this.county = in.readString(this.county instanceof Utf8 ? (Utf8)this.county : null);
          }
          break;

        case 3:
          this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
          break;

        case 4:
          if (in.readIndex() != 0) {
            in.readNull();
            this.zip = null;
          } else {
            this.zip = in.readString(this.zip instanceof Utf8 ? (Utf8)this.zip : null);
          }
          break;

        case 5:
          if (in.readIndex() != 0) {
            in.readNull();
            this.country = null;
          } else {
            this.country = in.readString(this.country instanceof Utf8 ? (Utf8)this.country : null);
          }
          break;

        case 6:
          if (in.readIndex() != 0) {
            in.readNull();
            this.createdBy = null;
          } else {
            this.createdBy = in.readString(this.createdBy instanceof Utf8 ? (Utf8)this.createdBy : null);
          }
          break;

        case 7:
          if (in.readIndex() != 0) {
            in.readNull();
            this.createdTs = null;
          } else {
            this.createdTs = in.readString(this.createdTs instanceof Utf8 ? (Utf8)this.createdTs : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










